@using GatheringTheMagic.Client.Models
@using GatheringTheMagic.Client.Utility
@using System.Net.Http.Json;
@inject HttpClient Http
@page "/cards"

<h3>Cards</h3>

@if (_isLoading)
{
	<div class="spinner-border text-primary" role="status">
		<span class="visually-hidden">Loading</span>
	</div>
	<p>Loading Cards...</p>
	
}
else if (_cards == null || _cards.Length == 0)
{
	<p>No Cards found in database!</p>
}
else
{
	<select class="form-select w-auto mb-3" @onchange="SortByColor">
		<option value="">Sort by color</option>
		<option value="W">White</option>
		<option value="U">Blue</option>
		<option value="B">Black</option>
		<option value="R">Red</option>
		<option value="G">Green</option>
		<option value="C">Colorless</option>
		<option value="multicolor">Multicolor</option>
	</select>

	<select class="form-select w-auto mb-3" @onchange="SortBySet">
		<option value="">Sort by set</option>
		@foreach (var set in _cardSets)
		{
			<option value="@set.SetCode">@set.SetName</option>
		}
	</select>

	<table class="table">
		<thead>
			<tr>
				<th>Name</th>
				<th>Type</th>
				<th>Mana Cost</th>
			</tr>
		</thead>
		<tbody>
			@foreach (var card in _cards)
			{
				<tr>
					@if (@card.power != null)
					{
						<td><a href="/card/@card.ID">@card.name (@card.power / @card.toughness)</a></td>
					}
					else
					{
						<td><a href="/card/@card.ID">@card.name</a></td>
					}
					<td>@card.type</td>

					<td>@(RenderManaSymbols(card.manaCost))</td>
				</tr>
			}
		</tbody>

	</table>

	<div class="pagination">
		<button @onclick="PrevPage" disabled="@(!_canGoPrev)" class="btn btn-primary mx-1">Previous</button>
		<button @onclick="NextPage" disabled="@(!_canGoNext)" class="btn btn-primary mx-1">Next</button>
	</div>

	<NavLink href="addcard" class="btn btn-primary m-1">Create a new card</NavLink>
}

@code {

	private CardOverview[]? _cards;
	private List<CardSetDTO> _cardSets = new List<CardSetDTO>();

	protected string? responseTxt = "testing....";
	private int _currentPage = 1;
	private int _pageSize = 10;
	private int _totalItems = 0;
	private bool _isLoading = false;

	private int _totalPages => (int)Math.Ceiling((double)_totalItems / _pageSize);
	private bool _canGoPrev => _currentPage > 1;
	private bool _canGoNext => _currentPage < _totalPages;
	private string _selectedColorFilter = string.Empty;
	private string _selectedSetFilter = string.Empty;

	protected override async Task OnInitializedAsync()
	{
		await LoadDataAsync();
	}

	private async Task LoadDataAsync()
	{
		_isLoading = true;

		var url = $"api/cards?pageNumber={_currentPage}&pageSize={_pageSize}";

		if (!string.IsNullOrEmpty(_selectedColorFilter))
		{
			url += $"&colorFilter={_selectedColorFilter}";
		}

		if (!string.IsNullOrEmpty(_selectedSetFilter))
		{
			url += $"&setFilter={_selectedSetFilter}";
		}

		try
		{
			var response = await Http.GetFromJsonAsync<PaginatedResponse>(url);

			if (response != null)
			{
				_cards = response.Data.Cards;
				_totalItems = response.TotalItems;
				_currentPage = response.PageNumber;
				_pageSize = response.PageSize;
			}
		} 
		catch (HttpRequestException ex)
		{
			responseTxt = $"Error in getting cards: {ex.Message}";
		}

		url = $"api/sets";

		try
		{
			var response = await Http.GetFromJsonAsync<CardSetResponseData>(url);
			if (response != null)
			{
				_cardSets = response.cardSets.ToList();
			}
		}
		catch (HttpRequestException ex)
		{
			responseTxt = $"Error in getting setlist: {ex}";
		}


		_isLoading = false;
	}

	private async Task SortByColor(ChangeEventArgs e)
	{
		_selectedColorFilter = e.Value?.ToString() ?? string.Empty;
		_currentPage = 1; 
		await LoadDataAsync();
	}

	private async Task SortBySet(ChangeEventArgs e)
	{
		_selectedSetFilter = e.Value?.ToString() ?? string.Empty;
		_currentPage = 1;
		await LoadDataAsync();
	}

	protected async Task PrevPage()
	{
		if (_canGoPrev)
		{
			_currentPage--;
			await LoadDataAsync();
			StateHasChanged();
		}
	}

	protected async Task NextPage()
	{
		if (_canGoNext)
		{
			_currentPage++;
			await LoadDataAsync();
			StateHasChanged();
		}
	}

	private MarkupString RenderManaSymbols(string? manaCost)
	{
		if (string.IsNullOrWhiteSpace(manaCost))
			return new MarkupString("");

		var output = new System.Text.StringBuilder();
		var matches = System.Text.RegularExpressions.Regex.Matches(manaCost, @"\{(.*?)\}");

		foreach (System.Text.RegularExpressions.Match match in matches)
		{
			var symbol = match.Groups[1].Value.ToUpperInvariant();
			var formattedSymbol = symbol.Replace("/", "").Replace("∞", "infinity").Replace("½", "half");

			var url = $"https://svgs.scryfall.io/card-symbols/{formattedSymbol}.svg";
			output.Append($"<img src='{url}' alt='{symbol}' style='height: 1em; vertical-align: middle; margin-right: 1px;' />");
		}

		return new MarkupString(output.ToString());
	}
}
